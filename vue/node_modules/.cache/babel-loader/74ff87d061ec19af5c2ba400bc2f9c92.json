{"remainingRequest":"/workspace/blockchain_act8_logistic/vue/node_modules/babel-loader/lib/index.js!/workspace/blockchain_act8_logistic/vue/src/store/index.js","dependencies":[{"path":"/workspace/blockchain_act8_logistic/vue/src/store/index.js","mtime":1603212920995},{"path":"/workspace/blockchain_act8_logistic/vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/workspace/blockchain_act8_logistic/vue/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7CmltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tICIvd29ya3NwYWNlL2Jsb2NrY2hhaW5fYWN0OF9sb2dpc3RpYy92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvd29ya3NwYWNlL2Jsb2NrY2hhaW5fYWN0OF9sb2dpc3RpYy92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvd29ya3NwYWNlL2Jsb2NrY2hhaW5fYWN0OF9sb2dpc3RpYy92dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwppbXBvcnQgVnVlIGZyb20gInZ1ZSI7CmltcG9ydCBWdWV4IGZyb20gInZ1ZXgiOwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiOwppbXBvcnQgYXBwIGZyb20gIi4vYXBwLmpzIjsKaW1wb3J0IHsgU2VjcDI1NmsxV2FsbGV0LCBTaWduaW5nQ29zbW9zQ2xpZW50LCBtYWtlQ29zbW9zaHViUGF0aCB9IGZyb20gIkBjb3NtanMvbGF1bmNocGFkIjsKVnVlLnVzZShWdWV4KTsKdmFyIEFQSSA9ICJodHRwOi8vbG9jYWxob3N0OjEzMTciOwp2YXIgQUREUkVTU19QUkVGSVggPSAiY29zbW9zIjsKZXhwb3J0IGRlZmF1bHQgbmV3IFZ1ZXguU3RvcmUoewogIHN0YXRlOiB7CiAgICBhcHA6IGFwcCwKICAgIGFjY291bnQ6IHt9LAogICAgY2hhaW5faWQ6ICIiLAogICAgZGF0YToge30sCiAgICBjbGllbnQ6IG51bGwKICB9LAogIG11dGF0aW9uczogewogICAgYWNjb3VudFVwZGF0ZTogZnVuY3Rpb24gYWNjb3VudFVwZGF0ZShzdGF0ZSwgX3JlZikgewogICAgICB2YXIgYWNjb3VudCA9IF9yZWYuYWNjb3VudDsKICAgICAgc3RhdGUuYWNjb3VudCA9IGFjY291bnQ7CiAgICB9LAogICAgY2hhaW5JZFNldDogZnVuY3Rpb24gY2hhaW5JZFNldChzdGF0ZSwgX3JlZjIpIHsKICAgICAgdmFyIGNoYWluX2lkID0gX3JlZjIuY2hhaW5faWQ7CiAgICAgIHN0YXRlLmNoYWluX2lkID0gY2hhaW5faWQ7CiAgICB9LAogICAgZW50aXR5U2V0OiBmdW5jdGlvbiBlbnRpdHlTZXQoc3RhdGUsIF9yZWYzKSB7CiAgICAgIHZhciB0eXBlID0gX3JlZjMudHlwZSwKICAgICAgICAgIGJvZHkgPSBfcmVmMy5ib2R5OwogICAgICB2YXIgdXBkYXRlZCA9IHt9OwogICAgICB1cGRhdGVkW3R5cGVdID0gYm9keTsKICAgICAgc3RhdGUuZGF0YSA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgc3RhdGUuZGF0YSksIHVwZGF0ZWQpOwogICAgfSwKICAgIGNsaWVudFVwZGF0ZTogZnVuY3Rpb24gY2xpZW50VXBkYXRlKHN0YXRlLCBfcmVmNCkgewogICAgICB2YXIgY2xpZW50ID0gX3JlZjQuY2xpZW50OwogICAgICBzdGF0ZS5jbGllbnQgPSBjbGllbnQ7CiAgICB9CiAgfSwKICBhY3Rpb25zOiB7CiAgICBpbml0OiBmdW5jdGlvbiBpbml0KF9yZWY1KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGRpc3BhdGNoLCBzdGF0ZTsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBkaXNwYXRjaCA9IF9yZWY1LmRpc3BhdGNoLCBzdGF0ZSA9IF9yZWY1LnN0YXRlOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goImNoYWluSWRGZXRjaCIpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBzdGF0ZS5hcHAudHlwZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjYpIHsKICAgICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBfcmVmNi50eXBlOwogICAgICAgICAgICAgICAgICBkaXNwYXRjaCgiZW50aXR5RmV0Y2giLCB7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogdHlwZQogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgY2hhaW5JZEZldGNoOiBmdW5jdGlvbiBjaGFpbklkRmV0Y2goX3JlZjcpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgbm9kZV9pbmZvOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNy5jb21taXQ7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCIiLmNvbmNhdChBUEksICIvbm9kZV9pbmZvIikpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBub2RlX2luZm8gPSBfY29udGV4dDIuc2VudC5kYXRhLm5vZGVfaW5mbzsKICAgICAgICAgICAgICAgIGNvbW1pdCgiY2hhaW5JZFNldCIsIHsKICAgICAgICAgICAgICAgICAgY2hhaW5faWQ6IG5vZGVfaW5mby5uZXR3b3JrCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9LAogICAgYWNjb3VudFNpZ25JbjogZnVuY3Rpb24gYWNjb3VudFNpZ25JbihfcmVmOCwgX3JlZjkpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgbW5lbW9uaWM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY4LmNvbW1pdDsKICAgICAgICAgICAgICAgIG1uZW1vbmljID0gX3JlZjkubW5lbW9uaWM7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgbmV3IFByb21pc2UoIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfcmVmMTAgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgICAgIHZhciB3YWxsZXQsIF95aWVsZCR3YWxsZXQkZ2V0QWNjbywgX3lpZWxkJHdhbGxldCRnZXRBY2NvMiwgYWRkcmVzcywgdXJsLCBhY2MsIGFjY291bnQsIGNsaWVudDsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTZWNwMjU2azFXYWxsZXQuZnJvbU1uZW1vbmljKG1uZW1vbmljLCBtYWtlQ29zbW9zaHViUGF0aCgwKSwgQUREUkVTU19QUkVGSVgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxsZXQgPSBfY29udGV4dDMuc2VudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3YWxsZXQuZ2V0QWNjb3VudHMoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3lpZWxkJHdhbGxldCRnZXRBY2NvID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfeWllbGQkd2FsbGV0JGdldEFjY28yID0gX3NsaWNlZFRvQXJyYXkoX3lpZWxkJHdhbGxldCRnZXRBY2NvLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgPSBfeWllbGQkd2FsbGV0JGdldEFjY28yWzBdLmFkZHJlc3M7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAiIi5jb25jYXQoQVBJLCAiL2F1dGgvYWNjb3VudHMvIikuY29uY2F0KGFkZHJlc3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAxMTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQodXJsKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjYyA9IF9jb250ZXh0My5zZW50LmRhdGE7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjYy5yZXN1bHQudmFsdWUuYWRkcmVzcyA9PT0gYWRkcmVzcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50ID0gYWNjLnJlc3VsdC52YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50ID0gbmV3IFNpZ25pbmdDb3Ntb3NDbGllbnQoQVBJLCBhZGRyZXNzLCB3YWxsZXQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21taXQoImFjY291bnRVcGRhdGUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudDogYWNjb3VudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWl0KCJjbGllbnRVcGRhdGUiLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50OiBjbGllbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYWNjb3VudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoIkFjY291bnQgZG9lc24ndCBleGlzdC4iKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlMyk7CiAgICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gsIF94MikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVmMTAuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKSkpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBlbnRpdHlGZXRjaDogZnVuY3Rpb24gZW50aXR5RmV0Y2goX3JlZjExLCBfcmVmMTIpIHsKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoKSB7CiAgICAgICAgdmFyIHN0YXRlLCBjb21taXQsIHR5cGUsIGNoYWluX2lkLCB1cmwsIGJvZHk7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjExLnN0YXRlLCBjb21taXQgPSBfcmVmMTEuY29tbWl0OwogICAgICAgICAgICAgICAgdHlwZSA9IF9yZWYxMi50eXBlOwogICAgICAgICAgICAgICAgY2hhaW5faWQgPSBzdGF0ZS5jaGFpbl9pZDsKICAgICAgICAgICAgICAgIHVybCA9ICIiLmNvbmNhdChBUEksICIvIikuY29uY2F0KGNoYWluX2lkLCAiLyIpLmNvbmNhdCh0eXBlKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNjsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQodXJsKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgYm9keSA9IF9jb250ZXh0NS5zZW50LmRhdGEucmVzdWx0OwogICAgICAgICAgICAgICAgY29tbWl0KCJlbnRpdHlTZXQiLCB7CiAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsCiAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHkKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBhY2NvdW50VXBkYXRlOiBmdW5jdGlvbiBhY2NvdW50VXBkYXRlKF9yZWYxMykgewogICAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNigpIHsKICAgICAgICB2YXIgc3RhdGUsIGNvbW1pdCwgdXJsLCBhY2MsIGFjY291bnQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU2JChfY29udGV4dDYpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ2LnByZXYgPSBfY29udGV4dDYubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjEzLnN0YXRlLCBjb21taXQgPSBfcmVmMTMuY29tbWl0OwogICAgICAgICAgICAgICAgdXJsID0gIiIuY29uY2F0KEFQSSwgIi9hdXRoL2FjY291bnRzLyIpLmNvbmNhdChzdGF0ZS5jbGllbnQuc2VuZGVyQWRkcmVzcyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KHVybCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIGFjYyA9IF9jb250ZXh0Ni5zZW50LmRhdGE7CiAgICAgICAgICAgICAgICBhY2NvdW50ID0gYWNjLnJlc3VsdC52YWx1ZTsKICAgICAgICAgICAgICAgIGNvbW1pdCgiYWNjb3VudFVwZGF0ZSIsIHsKICAgICAgICAgICAgICAgICAgYWNjb3VudDogYWNjb3VudAogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ni5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNik7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGVudGl0eVN1Ym1pdDogZnVuY3Rpb24gZW50aXR5U3VibWl0KF9yZWYxNCwgX3JlZjE1KSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU3KCkgewogICAgICAgIHZhciBzdGF0ZSwgdHlwZSwgYm9keSwgY2hhaW5faWQsIGNyZWF0b3IsIGJhc2VfcmVxLCByZXEsIF95aWVsZCRheGlvcyRwb3N0LCBkYXRhLCBfZGF0YSR2YWx1ZSwgbXNnLCBmZWUsIG1lbW87CgogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNyQoX2NvbnRleHQ3KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ny5wcmV2ID0gX2NvbnRleHQ3Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWYxNC5zdGF0ZTsKICAgICAgICAgICAgICAgIHR5cGUgPSBfcmVmMTUudHlwZSwgYm9keSA9IF9yZWYxNS5ib2R5OwogICAgICAgICAgICAgICAgY2hhaW5faWQgPSBzdGF0ZS5jaGFpbl9pZDsKICAgICAgICAgICAgICAgIGNyZWF0b3IgPSBzdGF0ZS5jbGllbnQuc2VuZGVyQWRkcmVzczsKICAgICAgICAgICAgICAgIGJhc2VfcmVxID0gewogICAgICAgICAgICAgICAgICBjaGFpbl9pZDogY2hhaW5faWQsCiAgICAgICAgICAgICAgICAgIGZyb206IGNyZWF0b3IKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXEgPSBfb2JqZWN0U3ByZWFkKHsKICAgICAgICAgICAgICAgICAgYmFzZV9yZXE6IGJhc2VfcmVxLAogICAgICAgICAgICAgICAgICBjcmVhdG9yOiBjcmVhdG9yCiAgICAgICAgICAgICAgICB9LCBib2R5KTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBheGlvcy5wb3N0KCIiLmNvbmNhdChBUEksICIvIikuY29uY2F0KGNoYWluX2lkLCAiLyIpLmNvbmNhdCh0eXBlKSwgcmVxKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX3lpZWxkJGF4aW9zJHBvc3QgPSBfY29udGV4dDcuc2VudDsKICAgICAgICAgICAgICAgIGRhdGEgPSBfeWllbGQkYXhpb3MkcG9zdC5kYXRhOwogICAgICAgICAgICAgICAgX2RhdGEkdmFsdWUgPSBkYXRhLnZhbHVlLCBtc2cgPSBfZGF0YSR2YWx1ZS5tc2csIGZlZSA9IF9kYXRhJHZhbHVlLmZlZSwgbWVtbyA9IF9kYXRhJHZhbHVlLm1lbW87CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDEzOwogICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmNsaWVudC5zaWduQW5kUG9zdChtc2csIGZlZSwgbWVtbyk7CgogICAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQ3LnNlbnQpOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU3KTsKICAgICAgfSkpKCk7CiAgICB9CiAgfQp9KTs="},{"version":3,"sources":["/workspace/blockchain_act8_logistic/vue/src/store/index.js"],"names":["Vue","Vuex","axios","app","Secp256k1Wallet","SigningCosmosClient","makeCosmoshubPath","use","API","ADDRESS_PREFIX","Store","state","account","chain_id","data","client","mutations","accountUpdate","chainIdSet","entitySet","type","body","updated","clientUpdate","actions","init","dispatch","types","forEach","chainIdFetch","commit","get","node_info","network","accountSignIn","mnemonic","Promise","resolve","reject","fromMnemonic","wallet","getAccounts","address","url","acc","result","value","entityFetch","senderAddress","entitySubmit","creator","base_req","from","req","post","msg","fee","memo","signAndPost"],"mappings":"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","sourcesContent":["import Vue from \"vue\";\nimport Vuex from \"vuex\";\nimport axios from \"axios\";\nimport app from \"./app.js\";\nimport { Secp256k1Wallet, SigningCosmosClient, makeCosmoshubPath } from \"@cosmjs/launchpad\";\n\nVue.use(Vuex);\n\nconst API = \"http://localhost:1317\";\nconst ADDRESS_PREFIX = \"cosmos\"\n\nexport default new Vuex.Store({\n  state: {\n    app,\n    account: {},\n    chain_id: \"\",\n    data: {},\n    client: null,\n  },\n  mutations: {\n    accountUpdate(state, { account }) {\n      state.account = account;\n    },\n    chainIdSet(state, { chain_id }) {\n      state.chain_id = chain_id;\n    },\n    entitySet(state, { type, body }) {\n      const updated = {};\n      updated[type] = body;\n      state.data = { ...state.data, ...updated };\n    },\n    clientUpdate(state, { client }) {\n      state.client = client;\n    },\n  },\n  actions: {\n    async init({ dispatch, state }) {\n      await dispatch(\"chainIdFetch\");\n      state.app.types.forEach(({ type }) => {\n        dispatch(\"entityFetch\", { type });\n      });\n    },\n    async chainIdFetch({ commit }) {\n      const node_info = (await axios.get(`${API}/node_info`)).data.node_info;\n      commit(\"chainIdSet\", { chain_id: node_info.network });\n    },\n    async accountSignIn({ commit }, { mnemonic }) {\n      return new Promise(async (resolve, reject) => {\n        const wallet = await Secp256k1Wallet.fromMnemonic(mnemonic, makeCosmoshubPath(0), ADDRESS_PREFIX);\n        const [{ address }] = await wallet.getAccounts();\n        const url = `${API}/auth/accounts/${address}`;\n        const acc = (await axios.get(url)).data;\n        if (acc.result.value.address === address) {\n          const account = acc.result.value;\n          const client = new SigningCosmosClient(API, address, wallet);\n          commit(\"accountUpdate\", { account });\n          commit(\"clientUpdate\", { client });\n          resolve(account);\n        } else {\n          reject(\"Account doesn't exist.\");\n        }\n      });\n    },\n    async entityFetch({ state, commit }, { type }) {\n      const { chain_id } = state;\n      const url = `${API}/${chain_id}/${type}`;\n      const body = (await axios.get(url)).data.result;\n      commit(\"entitySet\", { type, body });\n    },\n    async accountUpdate({ state, commit }) {\n      const url = `${API}/auth/accounts/${state.client.senderAddress}`;\n      const acc = (await axios.get(url)).data;\n      const account = acc.result.value;\n      commit(\"accountUpdate\", { account });\n    },\n    async entitySubmit({ state }, { type, body }) {\n      const { chain_id } = state;\n      const creator = state.client.senderAddress;\n      const base_req = { chain_id, from: creator };\n      const req = { base_req, creator, ...body };\n      const { data } = await axios.post(`${API}/${chain_id}/${type}`, req);\n      const { msg, fee, memo } = data.value;\n      return await state.client.signAndPost(msg, fee, memo);\n    },\n  },\n});\n"]}]}